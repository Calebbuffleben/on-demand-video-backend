generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id             String             @id @default(uuid())
  name           String
  clerkId        String             @unique
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  muxTokenId     String?
  muxTokenSecret String?
  pendingVideos  PendingVideo[]
  subscription   Subscription?
  users          UserOrganization[]
  videos         Video[]
  analyticsCache AnalyticsCache[]
  
  @@index([clerkId])
}

model User {
  id            String             @id @default(uuid())
  clerkId       String             @unique
  email         String             @unique
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  organizations UserOrganization[]
}

model UserOrganization {
  id             String       @id @default(uuid())
  userId         String
  organizationId String
  role           Role         @default(MEMBER)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

model Video {
  id                  String       @id @default(uuid())
  name                String
  description         String?
  organizationId      String
  status              VideoStatus  @default(PROCESSING)
  duration            Int?
  thumbnailUrl        String?
  playbackUrl         String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  isLive              Boolean      @default(false)
  visibility          Visibility   @default(PUBLIC)
  tags                String[]
  price               Float?
  currency            String?      @default("USD")
  muxAssetId          String?
  muxPlaybackId       String?
  muxUploadId         String?
  analytics           VideoAnalytics?
  
  // Display options
  showProgressBar     Boolean?     @default(true)
  showTitle           Boolean?     @default(true)
  showPlaybackControls Boolean?    @default(true)
  autoPlay            Boolean?     @default(false)
  muted               Boolean?     @default(false)
  loop                Boolean?     @default(false)
  useOriginalProgressBar Boolean?  @default(false)
  progressBarColor    String?      @default("#171717")
  progressEasing      Float?       @default(0.25)
  playButtonColor     String?      @default("#FFFFFF")
  playButtonSize      Int?         @default(60)
  playButtonBgColor   String?      @default("rgba(0,0,0,0.6)")
  soundControlText    String?      @default("Sound")
  soundControlColor   String?      @default("#FFFFFF")
  soundControlOpacity Float?       @default(0.8)
  soundControlSize    Int?         @default(64)
  showSoundControl    Boolean?     @default(false)
  
  // Embed options
  showVideoTitle      Boolean?     @default(true)
  showUploadDate      Boolean?     @default(true)
  showMetadata        Boolean?     @default(true)
  allowFullscreen     Boolean?     @default(true)
  responsive          Boolean?     @default(true)
  showBranding        Boolean?     @default(true)
  showTechnicalInfo   Boolean?     @default(false)
  
  // CTA fields
  ctaText        String?
  ctaButtonText  String?
  ctaLink        String?
  ctaStartTime   Int?
  ctaEndTime     Int?
  
  organization        Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model PendingVideo {
  id             String       @id @default(uuid())
  name           String
  description    String?
  muxUploadId    String?
  muxAssetId     String?
  organizationId String
  status         VideoStatus  @default(PROCESSING)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  visibility     Visibility   @default(PUBLIC)
  tags           String[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                   String             @id @default(uuid())
  stripeCustomerId     String?            @unique
  stripeSubscriptionId String?            @unique
  status               SubscriptionStatus @default(INACTIVE)
  planType             PlanType           @default(FREE)
  trialEndsAt          DateTime?
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  organizationId       String             @unique
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  organization         Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model VideoAnalytics {
  id            String   @id @default(uuid())
  videoId       String   @unique
  views         Int      @default(0)
  watchTime     Int      @default(0)
  retention     Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  video         Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  dailyStats    VideoAnalyticsDaily[]
  hourlyStats   VideoAnalyticsHourly[]
  viewerStats   VideoViewerStats[]
}

model VideoAnalyticsDaily {
  id            String   @id @default(uuid())
  videoId       String
  date          DateTime
  views         Int      @default(0)
  watchTime     Int      @default(0)
  uniqueViewers Int      @default(0)
  retention     Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  videoAnalytics VideoAnalytics @relation(fields: [videoId], references: [videoId], onDelete: Cascade)

  @@unique([videoId, date])
  @@index([date])
}

model VideoAnalyticsHourly {
  id            String   @id @default(uuid())
  videoId       String
  timestamp     DateTime
  views         Int      @default(0)
  watchTime     Int      @default(0)
  uniqueViewers Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  videoAnalytics VideoAnalytics @relation(fields: [videoId], references: [videoId], onDelete: Cascade)

  @@unique([videoId, timestamp])
  @@index([timestamp])
}

model VideoViewerStats {
  id            String   @id @default(uuid())
  videoId       String
  viewerId      String   // Can be IP hash or user ID
  watchTime     Int      @default(0)
  lastWatched   DateTime @default(now())
  watchCount    Int      @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  videoAnalytics VideoAnalytics @relation(fields: [videoId], references: [videoId], onDelete: Cascade)

  @@unique([videoId, viewerId])
  @@index([viewerId])
}

model AnalyticsCache {
  id            String   @id @default(uuid())
  organizationId String
  cacheKey      String
  data          Json
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, cacheKey])
  @@index([expiresAt])
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELED
  TRIALING
}

enum PlanType {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum VideoStatus {
  PROCESSING
  READY
  ERROR
  DELETED
}

enum Visibility {
  PUBLIC
  PRIVATE
  ORGANIZATION
}
