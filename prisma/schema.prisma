generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id             String             @id @default(uuid())
  name           String
  clerkId        String?            @unique
  slug           String?            @unique
  description    String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  muxTokenId     String?
  muxTokenSecret String?
  analyticsCache AnalyticsCache[]
  pendingVideos  PendingVideo[]
  subscription   Subscription?
  users          UserOrganization[]
  videos         Video[]

  @@index([clerkId])
  @@index([slug])
}

model User {
  id            String             @id @default(uuid())
  clerkId       String?            @unique
  email         String             @unique
  password      String?
  firstName     String?
  lastName      String?
  emailVerified Boolean            @default(false)
  lastLogin     DateTime?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  organizations UserOrganization[]
  emailTokens   EmailVerificationToken[]
  passwordTokens PasswordResetToken[]
}

model UserOrganization {
  id             String       @id @default(uuid())
  userId         String
  organizationId String
  role           Role         @default(MEMBER)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

model Video {
  id                     String          @id @default(uuid())
  name                   String
  description            String?
  organizationId         String
  status                 VideoStatus     @default(PROCESSING)
  duration               Int?
  thumbnailUrl           String?
  playbackUrl            String?
  // New generic provider fields (internal pipeline)
  provider               VideoProvider   @default(INTERNAL)
  assetKey               String?
  jobId                  String?
  playbackHlsPath        String?
  thumbnailPath          String?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  isLive                 Boolean         @default(false)
  visibility             Visibility      @default(PUBLIC)
  tags                   String[]
  price                  Float?
  currency               String?         @default("USD")
  muxAssetId             String?
  muxPlaybackId          String?
  muxUploadId            String?
  allowFullscreen        Boolean?        @default(true)
  autoPlay               Boolean?        @default(false)
  loop                   Boolean?        @default(false)
  muted                  Boolean?        @default(false)
  responsive             Boolean?        @default(true)
  showBranding           Boolean?        @default(true)
  showMetadata           Boolean?        @default(true)
  showPlaybackControls   Boolean?        @default(true)
  showProgressBar        Boolean?        @default(true)
  showTechnicalInfo      Boolean?        @default(false)
  showTitle              Boolean?        @default(true)
  showUploadDate         Boolean?        @default(true)
  showVideoTitle         Boolean?        @default(true)
  useOriginalProgressBar Boolean?        @default(false)
  playButtonBgColor      String?         @default("rgba(0,0,0,0.6)")
  playButtonColor        String?         @default("#FFFFFF")
  playButtonSize         Int?            @default(60)
  progressBarColor       String?         @default("#171717")
  progressEasing         Float?          @default(0.25)
  ctaButtonText          String?
  ctaEndTime             Int?
  ctaLink                String?
  ctaStartTime           Int?
  ctaText                String?
  soundControlColor      String?         @default("#FFFFFF")
  soundControlOpacity    Float?          @default(0.8)
  soundControlSize       Int?            @default(64)
  soundControlText       String?         @default("Sound")
  showSoundControl       Boolean?        @default(false)
  organization           Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  analytics              VideoAnalytics?
  playbackEvents         VideoPlaybackEvent[]
}

model PendingVideo {
  id             String       @id @default(uuid())
  name           String
  description    String?
  muxUploadId    String?
  muxAssetId     String?
  organizationId String
  status         VideoStatus  @default(PROCESSING)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  visibility     Visibility   @default(PUBLIC)
  tags           String[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                   String             @id @default(uuid())
  stripeCustomerId     String?            @unique
  stripeSubscriptionId String?            @unique
  status               SubscriptionStatus @default(INACTIVE)
  planType             PlanType           @default(FREE)
  trialEndsAt          DateTime?
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  organizationId       String             @unique
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  organization         Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model VideoAnalytics {
  id          String                 @id @default(uuid())
  videoId     String                 @unique
  views       Int                    @default(0)
  watchTime   Int                    @default(0)
  retention   Json
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  video       Video                  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  dailyStats  VideoAnalyticsDaily[]
  hourlyStats VideoAnalyticsHourly[]
  viewerStats VideoViewerStats[]
}

model VideoAnalyticsDaily {
  id             String         @id @default(uuid())
  videoId        String
  date           DateTime
  views          Int            @default(0)
  watchTime      Int            @default(0)
  uniqueViewers  Int            @default(0)
  retention      Json
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  videoAnalytics VideoAnalytics @relation(fields: [videoId], references: [videoId], onDelete: Cascade)

  @@unique([videoId, date])
  @@index([date])
}

model VideoAnalyticsHourly {
  id             String         @id @default(uuid())
  videoId        String
  timestamp      DateTime
  views          Int            @default(0)
  watchTime      Int            @default(0)
  uniqueViewers  Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  videoAnalytics VideoAnalytics @relation(fields: [videoId], references: [videoId], onDelete: Cascade)

  @@unique([videoId, timestamp])
  @@index([timestamp])
}

model VideoViewerStats {
  id             String         @id @default(uuid())
  videoId        String
  viewerId       String
  watchTime      Int            @default(0)
  lastWatched    DateTime       @default(now())
  watchCount     Int            @default(1)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  videoAnalytics VideoAnalytics @relation(fields: [videoId], references: [videoId], onDelete: Cascade)

  @@unique([videoId, viewerId])
  @@index([viewerId])
}

model AnalyticsCache {
  id             String       @id @default(uuid())
  organizationId String
  cacheKey       String
  data           Json
  expiresAt      DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, cacheKey])
  @@index([expiresAt])
}

/// Raw playback events collected from clients for analytics
model VideoPlaybackEvent {
  id             String   @id @default(uuid())
  videoId        String
  organizationId String?
  userId         String?
  sessionId      String?
  clientId       String?
  eventType      String
  currentTime    Int      @default(0)
  duration       Int      @default(0)
  ip             String?
  userAgent      String?
  createdAt      DateTime @default(now())

  video          Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([videoId, createdAt])
  @@index([videoId, sessionId])
  @@index([eventType])
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELED
  TRIALING
}

enum PlanType {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum VideoStatus {
  PROCESSING
  READY
  ERROR
  DELETED
}

enum Visibility {
  PUBLIC
  PRIVATE
  ORGANIZATION
}

enum VideoProvider {
  INTERNAL
  MUX
}

model EmailVerificationToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}
