// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Organization model for multi-tenancy
model Organization {
  id            String          @id @default(uuid())
  name          String
  clerkId       String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  videos        Video[]
  subscription  Subscription?
  users         UserOrganization[]
}

// User model (linked to Clerk users)
model User {
  id            String          @id @default(uuid())
  clerkId       String          @unique
  email         String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  organizations UserOrganization[]
}

// Many-to-many relationship between users and organizations
model UserOrganization {
  id              String       @id @default(uuid())
  userId          String
  organizationId  String
  role            Role         @default(MEMBER)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

// Product model
model Video {
  id                String       @id @default(uuid())
  name              String
  description       String?
  cloudflareId      String       @unique  // Cloudflare Stream video UID
  organizationId    String
  status            VideoStatus  @default(PROCESSING)
  duration          Int?         // Duration in seconds
  thumbnailUrl      String?      // Cloudflare-generated thumbnail
  playbackUrl       String?      // URL for embedding/playing the video
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  isLive            Boolean      @default(false)  // Distinguish between VOD and live streams
  visibility        Visibility   @default(PUBLIC)
  tags              String[]     // For categorization and search
  // You can keep pricing fields if you plan to monetize videos
  price             Float?
  currency          String?      @default("USD")
}

// Subscription model for Stripe integration
model Subscription {
  id                String          @id @default(uuid())
  stripeCustomerId  String?         @unique
  stripeSubscriptionId String?      @unique
  status            SubscriptionStatus @default(INACTIVE)
  planType          PlanType        @default(FREE)
  trialEndsAt       DateTime?
  currentPeriodStart DateTime?
  currentPeriodEnd  DateTime?
  cancelAtPeriodEnd Boolean         @default(false)
  organizationId    String          @unique
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  organization      Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

// Enums
enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELED
  TRIALING
}

enum PlanType {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum VideoStatus {
  PROCESSING  // Video is being processed by Cloudflare
  READY       // Video is ready to stream
  ERROR       // Processing failed
  DELETED     // Video has been deleted from Cloudflare
}

enum Visibility {
  PUBLIC       // Anyone can view
  PRIVATE      // Only with signed URLs
  ORGANIZATION // Only members of the organization
}
